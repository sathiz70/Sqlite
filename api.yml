swagger: "2.0"
info:
  version: "1.0.0"
  title: "Auth API"
basePath: "/api/v1"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  JWT:
    type: "apiKey"
    in: "header"
    name: "Authorization"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      created_at:
        type: "string"
      updated_at:
        type: "string"
  Login:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  Token:
    type: "object"
    properties:
      access_token:
        type: "string"
      refresh_token:
        type: "string"
  ErrorResponse:
    type: "object"
    properties:
      message:
        type: "string"
  SuccessResponse:
    type: "object"
    properties:
      message:
        type: "string"
paths:
  /auth/register:
    post:
      tags:
        - "Auth"
      summary: "Registers a new user"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: "User registered successfully"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: "Email already exists"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /auth/login:
    post:
      tags:
        - "Auth"
      summary: "Login an existing user"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/Login"
      responses:
        200:
          description: "User logged in successfully"
          schema:
            $ref: "#/definitions/Token"
        401:
          description: "Invalid email or password"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /auth/refresh:
    post:
      tags:
        - "Auth"
      summary: "Refresh the access token using the refresh token"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            properties:
              refresh_token:
                type: "string"
      responses:
        200:
          description: "Access token refreshed successfully"
          schema:
            $ref: "#/definitions/Token"
        401:
          description: "Invalid or expired refresh token"
          schema:
            $ref: "#/definitions/ErrorResponse"


swagger: "2.0"
info:
  version: "1.0.0"
  title: "Product API"
  description: "API for managing products"
  contact:
    name: "Your name"
    email: "your-email@example.com"
basePath: "/api/v1"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  Product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      price:
        type: "number"
        format: "float"
  Error:
    type: "object"
    properties:
      message:
        type: "string"
  ErrorResponse:
    type: "object"
    properties:
      error:
        $ref: "#/definitions/Error"
  ProductArrayResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/Product"
  ProductSingleResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Product"
paths:
  /products:
    get:
      summary: "Get all products"
      description: "Returns a list of all products"
      produces:
        - "application/json"
      security:
        - Bearer: []
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ProductArrayResponse"
        401:
          $ref: "#/definitions/ErrorResponse"
    post:
      summary: "Create a new product"
      description: "Creates a new product with the specified details"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - in: "body"
          name: "body"
          description: "Product object that needs to be created"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        201:
          description: "Product created successfully"
          schema:
            $ref: "#/definitions/ProductSingleResponse"
        400:
          $ref: "#/definitions/ErrorResponse"
        401:
          $ref: "#/definitions/ErrorResponse"
  /products/{productId}:
    get:
      summary: "Get product by ID"
      description: "Returns a single product with the specified ID"
      produces:
        - "application/json"
      security:
        - Bearer: []
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of the product to retrieve"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ProductSingleResponse"
        401:
          $ref: "#/definitions/ErrorResponse"
        404:
          $ref: "#/definitions/ErrorResponse"
    put:
      summary: Updates a product by ID
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of the product to retrieve"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: OK
        404:
          description: Product not found
    delete:
      summary: Deletes a product by ID
      description: Deletes a product from the database using the provided ID.
      tags:
        - Product
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of the product to retrieve"
          required: true
          type: "integer"
          format: "int64"
      security:
        - Bearer: []
      responses:
        '204':
          description: The product was successfully deleted.
        '404':
          description: The product with the provided ID was not found.
        '500':
          description: An internal server error occurred.

